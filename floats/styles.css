* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/*
By adding an overflow: hidden declaration to a container div,
we’re telling it to recognize the height of any floated elements it contains.
This is how we can add a background color to our .page element and
have it actually render
*/
.page {
  width: 900px;
  margin: 0 auto;
}

/*
we need the overflow: hidden line to force the .container to pay attention
 to the height of the floated elements. Without it, we wouldn’t see our
 background color because .container would have zero height.
 */
.container {
  overflow:hidden;
  background-color: #EAEDF0;
}

.menu {
  height: 100px;
  background-color: #B2D6FF;    /* Medium blue */
}

.sidebar {
  float:left;
  width: 200px;
  height: 300px;
  background-color: #F09A9D;    /* Red */
}

.content {
  float: left;
  width: 650px;
  height: 500px;
  padding: 20px;
  background-color: #F5CF8E;    /* Yellow */
}

.article-image {
  float: left;
  width: 300px;
  height: 200px;
  margin-right: 20px;
  margin-bottom: 20px;
}

p {
  margin-bottom: 20px;
}

.footer {
  overflow: hidden;
  background-color: #D6E9FE;    /* Light blue */
}

.footer-item {
  float: left;
  width: 31%;
  margin: 20px 1.15%;
  height: 160px;
  background-color: #B2D6FF;    /* Medium blue */
}

.avatar {
  float: left;
  width: 60px;
  height: 60px;
  margin: 25px;
  border-radius: 40px;
  background-color: #D6E9FE;
}

.username {
  margin-top: 30px;
}

/*
This highlights another use case for our overflow: hidden trick. Sticking it
on our .comment box made sure that the text “horizontally cleared”
(that’s not a technical term) the floated image. Without it, the last line of
 the .comment text would hang underneath the image.
 */
.comment {
  margin: 1em;
  width: auto;
  overflow: hidden; /* This is important */
}
